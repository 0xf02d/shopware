<?php declare(strict_types=1);

namespace Shopware\#classUc#\Struct;

use Shopware\Framework\Struct\Collection;
#uses#

class #classUc#BasicCollection extends Collection
{
    /**
     * @var #classUc#BasicStruct[]
     */
    protected $elements = [];

    public function add(#classUc#BasicStruct $#classLc#): void
    {
        $key = $this->getKey($#classLc#);
        $this->elements[$key] = $#classLc#;
    }

    public function remove(string $uuid): void
    {
        parent::doRemoveByKey($uuid);
    }

    public function removeElement(#classUc#BasicStruct $#classLc#): void
    {
        parent::doRemoveByKey($this->getKey($#classLc#));
    }

    public function exists(#classUc#BasicStruct $#classLc#): bool
    {
        return parent::has($this->getKey($#classLc#));
    }

    public function getList(array $uuids): #classUc#BasicCollection
    {
        return new self(array_intersect_key($this->elements, array_flip($uuids)));
    }

    public function get(string $uuid): ? #classUc#BasicStruct
    {
        if ($this->has($uuid)) {
            return $this->elements[$uuid];
        }

        return null;
    }

    public function getUuids(): array
    {
        return $this->fmap(function(#classUc#BasicStruct $#classLc#) {
            return $#classLc#->getUuid();
        });
    }

    protected function getKey(#classUc#BasicStruct $element): string
    {
        return $element->getUuid();
    }

    public function merge(#classUc#BasicCollection $collection)
    {
        /** @var #classUc#BasicStruct $#classLc# */
        foreach ($collection as $#classLc#) {
            if ($this->has($this->getKey($#classLc#))) {
                continue;
            }
            $this->add($#classLc#);
        }
    }

#collectiveUuidGetters#

    public function current(): #classUc#BasicStruct
    {
        return parent::current();
    }
}