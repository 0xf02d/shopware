<?php declare(strict_types=1);

namespace Shopware\#classUc#\Factory;

use Doctrine\DBAL\Connection;
use Shopware\Context\Struct\TranslationContext;
use Shopware\#classUc#\Struct\#classUc#BasicStruct;
use Shopware\#classUc#\Struct\#classUc#DetailStruct;
use Shopware\Search\QuerySelection;
use Shopware\Search\QueryBuilder;
use Shopware\Framework\Read\ExtensionRegistryInterface;
#uses#

class #classUc#DetailFactory extends #classUc#BasicFactory
{
#dependencyFactories#

    public function __construct(
        Connection $connection,
        ExtensionRegistryInterface $registry#dependencyFactoriesConstructor#
    ) {
        parent::__construct($connection, $registry#parentFactoryDependencyCall#);
#dependencyFactoriesInit#
    }

    public function getFields(): array
    {
        $fields = array_merge(parent::getFields(), $this->getExtensionFields());
#depencyFields#
        return $fields;
    }

    public function hydrate(
        array $data,
        #classUc#BasicStruct $#classLc#,
        QuerySelection $selection,
        TranslationContext $context
    ): #classUc#BasicStruct
    {
        /**@var #classUc#DetailStruct $#classLc# */
        $#classLc# = parent::hydrate($data, $#classLc#, $selection, $context);
#hydration#
        return $#classLc#;
    }

    public function joinDependencies(QuerySelection $selection, QueryBuilder $query, TranslationContext $context): void
    {
        parent::joinDependencies($selection, $query, $context);

#joinDepdencies#
    }

    public function getAllFields(): array
    {
        $fields = parent::getAllFields();
#allFields#
        return $fields;
    }

    protected function getExtensionFields(): array
    {
        $fields = parent::getExtensionFields();

        foreach ($this->getExtensions() as $extension) {
            $extensionFields = $extension->getDetailFields();
            foreach ($extensionFields as $key => $field) {
                $fields[$key] = $field;
            }
        }

        return $fields;
    }

    #functions#
}