<?php declare(strict_types=1);

namespace Shopware\#classUc#\Repository;

use Shopware\Context\Struct\TranslationContext;
use Shopware\#classUc#\Event\#classUc#BasicLoadedEvent;
use Shopware\#classUc#\Loader\#classUc#BasicLoader;
use Shopware\#classUc#\Event\#classUc#DetailLoadedEvent;
use Shopware\#classUc#\Loader\#classUc#DetailLoader;
use Shopware\#classUc#\Searcher\#classUc#Searcher;
use Shopware\#classUc#\Searcher\#classUc#SearchResult;
use Shopware\#classUc#\Struct\#classUc#BasicCollection;
use Shopware\#classUc#\Struct\#classUc#DetailCollection;
use Shopware\#classUc#\Writer\#classUc#Resource;
use Shopware\Search\AggregationResult;
use Shopware\Search\Criteria;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Shopware\Search\UuidSearchResult;
use Shopware\#classUc#\Event\#classUc#WrittenEvent;
use Shopware\#classUc#\Writer\#classUc#Writer;

class #classUc#Repository
{
    /**
     * @var #classUc#DetailLoader
     */
    protected $detailLoader;

    /**
     * @var #classUc#BasicLoader
     */
    private $basicLoader;

    /**
     * @var EventDispatcherInterface
     */
    private $eventDispatcher;

    /**
     * @var #classUc#Searcher
     */
    private $searcher;

    /**
     * @var #classUc#Writer
     */
    private $writer;

    public function __construct(
        #classUc#DetailLoader $detailLoader,
        #classUc#BasicLoader $basicLoader,
        EventDispatcherInterface $eventDispatcher,
        #classUc#Searcher $searcher,
        #classUc#Writer $writer
    ) {
        $this->detailLoader = $detailLoader;
        $this->basicLoader = $basicLoader;
        $this->eventDispatcher = $eventDispatcher;
        $this->searcher = $searcher;
        $this->writer = $writer;
    }

    public function readDetail(array $uuids, TranslationContext $context): #classUc#DetailCollection
    {
        if (empty($uuids)) {
            return new #classUc#DetailCollection();
        }
        $collection = $this->detailLoader->load($uuids, $context);

        $this->eventDispatcher->dispatch(
            #classUc#DetailLoadedEvent::NAME,
            new #classUc#DetailLoadedEvent($collection, $context)
        );

        return $collection;
    }

    public function read(array $uuids, TranslationContext $context): #classUc#BasicCollection
    {
        if (empty($uuids)) {
            return new #classUc#BasicCollection();
        }

        $collection = $this->basicLoader->load($uuids, $context);

        $this->eventDispatcher->dispatch(
            #classUc#BasicLoadedEvent::NAME,
            new #classUc#BasicLoadedEvent($collection, $context)
        );

        return $collection;
    }

    public function search(Criteria $criteria, TranslationContext $context): #classUc#SearchResult
    {
        /** @var #classUc#SearchResult $result */
        $result = $this->searcher->search($criteria, $context);

        $this->eventDispatcher->dispatch(
            #classUc#BasicLoadedEvent::NAME,
            new #classUc#BasicLoadedEvent($result, $context)
        );

        return $result;
    }

    public function searchUuids(Criteria $criteria, TranslationContext $context): UuidSearchResult
    {
        return $this->searcher->searchUuids($criteria, $context);
    }

    public function aggregate(Criteria $criteria, TranslationContext $context): AggregationResult
    {
        $result = $this->searcher->aggregate($criteria, $context);

        return $result;
    }

    public function update(array $data, TranslationContext $context): #classUc#WrittenEvent
    {
        $event = $this->writer->update($data, $context);

        $this->eventDispatcher->dispatch($event::NAME, $event);

        return $event;
    }

    public function upsert(array $data, TranslationContext $context): #classUc#WrittenEvent
    {
        $event = $this->writer->upsert($data, $context);

        $this->eventDispatcher->dispatch($event::NAME, $event);

        return $event;
    }

    public function create(array $data, TranslationContext $context): #classUc#WrittenEvent
    {
        $event = $this->writer->create($data, $context);

        $this->eventDispatcher->dispatch($event::NAME, $event);

        return $event;
    }
}
